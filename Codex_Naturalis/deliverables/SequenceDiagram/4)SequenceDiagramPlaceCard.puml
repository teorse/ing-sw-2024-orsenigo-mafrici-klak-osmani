@startuml

participant Client
participant ClientConnectorSocket
participant Socket
participant ClientHandlerSocket
participant NewThread
participant ClientInputHandler
participant GameController
participant ObserverRelay
participant Lobby
participant Game

Client -> ClientConnectorSocket : .send(CSPPlayCard)
activate ClientConnectorSocket
ClientConnectorSocket -> Socket : CSPPlayCard
deactivate ClientConnectorSocket
Socket -> ClientHandlerSocket : CSPPlayCard
activate ClientHandlerSocket
create NewThread
ClientHandlerSocket -> NewThread : new
activate NewThread
deactivate ClientHandlerSocket
NewThread -> ClientInputHandler : .handleInput(CSPPlayCard)
deactivate NewThread
activate ClientInputHandler
ClientInputHandler -> ClientInputHandler : CSPPlayCard.execute()

    opt User is Logged In

        opt User is in a Lobby

            opt The Game has started in the lobby
            ClientInputHandler -> GameController : playCard()
            activate GameController
            GameController -> Game : playCard()
            activate Game

                opt It is the user's turn

                    opt The user is in the state of Place Card
                    Game -> Game : playCard()

                        opt The user provided a valid input
                        Game -> ObserverRelay : foreach player .update(SCPUpdateCardMap)
                        activate ObserverRelay
                        ObserverRelay -> ClientHandlerSocket : .send(SCPUpdateCardMap)
                        activate ClientHandlerSocket
                        ClientHandlerSocket -> Socket : SCPUpdateCardMap
                        Socket -> ClientConnectorSocket : SCPUpdateCardMap
                        activate ClientConnectorSocket
                        ClientConnectorSocket -> Client : SCPUpdateCardMap.execute()
                        deactivate ClientConnectorSocket
                        ClientHandlerSocket --> ObserverRelay
                        deactivate ClientHandlerSocket
                        ObserverRelay --> Game
                        deactivate ObserverRelay

                        Game -> ObserverRelay : foreach player .update(SCPUpdateSpecificPlayer)
                        activate ObserverRelay
                        ObserverRelay -> ClientHandlerSocket : .send(SCPUpdateSpecificPlayer)
                        activate ClientHandlerSocket
                        ClientHandlerSocket -> Socket : SCPUpdateSpecificPlayer
                        Socket -> ClientConnectorSocket : SCPUpdateSpecificPlayer
                        activate ClientConnectorSocket
                        ClientConnectorSocket -> Client : SCPUpdateSpecificPlayer.execute()
                        deactivate ClientConnectorSocket
                        ClientHandlerSocket --> ObserverRelay
                        deactivate ClientHandlerSocket
                        ObserverRelay --> Game
                        deactivate ObserverRelay

                        Game -> ObserverRelay : for current player .update(SCPUpdateCardPoolDrawability)
                        activate ObserverRelay
                        ObserverRelay -> ClientHandlerSocket : .send(SCPUpdateCardPoolDrawability)
                        activate ClientHandlerSocket
                        ClientHandlerSocket -> Socket : SCPUpdateCardPoolDrawability
                        Socket -> ClientConnectorSocket : SCPUpdateCardPoolDrawability
                        activate ClientConnectorSocket
                        ClientConnectorSocket -> Client : SCPUpdateCardPoolDrawability.execute()
                        deactivate ClientConnectorSocket
                        ClientHandlerSocket --> ObserverRelay
                        deactivate ClientHandlerSocket
                        ObserverRelay --> Game
                        deactivate ObserverRelay

                        Game -> ObserverRelay : for each player .update(SCPUpdateSpecificPlayer)
                        activate ObserverRelay
                        ObserverRelay -> ClientHandlerSocket : .send(SCPUpdateSpecificPlayer)
                        activate ClientHandlerSocket
                        ClientHandlerSocket -> Socket : SCPUpdateSpecificPlayer
                        Socket -> ClientConnectorSocket : SCPUpdateSpecificPlayer
                        activate ClientConnectorSocket
                        ClientConnectorSocket -> Client : SCPUpdateSpecificPlayer.execute()
                        deactivate ClientConnectorSocket
                        ClientHandlerSocket --> ObserverRelay
                        deactivate ClientHandlerSocket
                        ObserverRelay --> Game
                        deactivate ObserverRelay

                        Game -> ObserverRelay : for current player .update(SCPUpdateClientGameState(DRAW))
                        activate ObserverRelay
                        ObserverRelay -> ClientHandlerSocket : .send(SCPUpdateClientGameState(DRAW))
                        activate ClientHandlerSocket
                        ClientHandlerSocket -> Socket : SCPUpdateClientGameState(DRAW)
                        Socket -> ClientConnectorSocket : SCPUpdateClientGameState(DRAW)
                        activate ClientConnectorSocket
                        ClientConnectorSocket -> Client : SCPUpdateClientGameState(DRAW).execute()
                        deactivate ClientConnectorSocket
                        ClientHandlerSocket --> ObserverRelay
                        deactivate ClientHandlerSocket
                        ObserverRelay --> Game
                        deactivate ObserverRelay

                        else The user provided an invalid input
                        Game -> Game : InvalidGameInputException
                        Game --> GameController : InvalidGameInputException
                        GameController --> ClientInputHandler : InvalidGameInputException
                        activate ClientInputHandler
                        ClientInputHandler -> ClientInputHandler : Add event to logger and\nignore the command from user as it was illegal
                        ClientInputHandler --> NewThread
                        deactivate ClientInputHandler
                        activate NewThread
                        NewThread --> ClientHandlerSocket
                        deactivate NewThread
                        end

                    else The user is not in the state to place cards
                    Game -> Game : InvalidActionForPlayerStateException
                    Game --> GameController : InvalidActionForPlayerStateException
                    GameController --> ClientInputHandler : InvalidActionForPlayerStateException
                    activate ClientInputHandler
                    ClientInputHandler -> ClientInputHandler : Add event to logger and\nignore the command from user as it was illegal
                    ClientInputHandler --> NewThread
                    deactivate ClientInputHandler
                    activate NewThread
                    NewThread --> ClientHandlerSocket
                    deactivate NewThread
                    end

                else It's not the user's turn
                Game -> Game : NotYourTurnException
                Game --> GameController : NotYourTurnException
                deactivate Game
                GameController --> ClientInputHandler : NotYourTurnException
                deactivate GameController
                activate ClientInputHandler
                ClientInputHandler -> ClientInputHandler : Add event to logger and\nignore the command from user as it was illegal
                ClientInputHandler --> NewThread
                deactivate ClientInputHandler
                activate NewThread
                NewThread --> ClientHandlerSocket
                deactivate NewThread
                end

            else The Game has not yet Started in the Lobby
            ClientInputHandler --> ClientInputHandler : GameRequiredException
            ClientInputHandler -> ClientInputHandler : Add event to logger and\nignore the command from user as it was illegal
            ClientInputHandler --> NewThread
            activate NewThread
            NewThread --> ClientHandlerSocket
            deactivate NewThread
            end

        else The user is not in a Lobby
        ClientInputHandler --> ClientInputHandler : LobbyRequiredException
        ClientInputHandler -> ClientInputHandler : Add event to logger and\nignore the command from user as it was illegal
        ClientInputHandler --> NewThread
        activate NewThread
        NewThread --> ClientHandlerSocket
        deactivate NewThread
        end

    else The user is not logged in
    ClientInputHandler --> ClientInputHandler : LogInRequiredException
    ClientInputHandler -> ClientInputHandler : Add event to logger and\nignore the command from user as it was illegal
    ClientInputHandler --> NewThread
    deactivate ClientInputHandler
    activate NewThread
    NewThread --> ClientHandlerSocket
    destroy NewThread
    end

@enduml
